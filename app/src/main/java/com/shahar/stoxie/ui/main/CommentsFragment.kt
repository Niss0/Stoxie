package com.shahar.stoxie.ui.main

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import com.shahar.stoxie.databinding.FragmentCommentsBinding
import com.shahar.stoxie.ui.adapters.CommentAdapter

class CommentsFragment : Fragment() {

    private var _binding: FragmentCommentsBinding? = null
    private val binding get() = _binding!!

    // 1. Get the arguments passed from the previous screen using the navArgs delegate.
    // The 'CommentsFragmentArgs' class is auto-generated by the Navigation Component.
    private val args: CommentsFragmentArgs by navArgs()

    // 2. Initialize the ViewModel using the factory, passing the postId from the arguments.
    private val viewModel: CommentsViewModel by viewModels {
        CommentsViewModelFactory(args.postId)
    }

    private lateinit var commentAdapter: CommentAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentCommentsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupRecyclerView()

        // 3. Set the click listener for the send button.
        binding.btnSendComment.setOnClickListener {
            val commentText = binding.etCommentInput.text.toString().trim()
            viewModel.onSendCommentClicked(commentText)
        }

        // 4. Observe the list of comments and submit it to the adapter.
        viewModel.comments.observe(viewLifecycleOwner) { comments ->
            binding.pbCommentsLoading.isVisible = comments.isNullOrEmpty()
            commentAdapter.submitList(comments)
            // Scroll to the bottom to see the newest comment
            if (comments.isNotEmpty()) {
                binding.rvComments.scrollToPosition(comments.size - 1)
            }
        }

        // 5. Observe the state of the "add comment" operation.
        viewModel.addCommentState.observe(viewLifecycleOwner) { state ->
            binding.btnSendComment.isEnabled = state !is AddCommentState.Loading
            when (state) {
                is AddCommentState.Success -> {
                    // Clear the input field after a successful comment post.
                    binding.etCommentInput.text?.clear()
                    viewModel.onStateHandled()
                }
                is AddCommentState.Error -> {
                    Toast.makeText(context, "Error: ${state.message}", Toast.LENGTH_SHORT).show()
                    viewModel.onStateHandled()
                }
                else -> { /* Do nothing for Idle or Loading */ }
            }
        }
    }

    private fun setupRecyclerView() {
        commentAdapter = CommentAdapter()
        binding.rvComments.apply {
            adapter = commentAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
